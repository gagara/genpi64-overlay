#!/bin/sh
#
# Automatically attempt to extend root partition (calculated from
# the filesystem mounted at '/') to fill remaining free space on the device
#
# Checks for a sentinel file "dont_autoexpand_root" on /boot
# and will proceed only if not found.

SENTINEL="/boot/dont_autoexpand_root"
if [ -f "${SENTINEL}" ]; then
	# sentinel found, service should really be disabled
	echo "Sentinel file detected; consider deleting ${SVCNAME} from boot runlevel"
	return 0
fi

# Find the partition mounted as / according to the kernel
ROOTPART="$(awk '/\s\/\s/{print $1}' /proc/mounts)"
# Find the root partitions filesystem type
ROOTFS="$(awk '/\s\/\s/{print $3}' /proc/mounts)"
# Discard the partition number to find the underlying drive
ROOTDRIVE="$(sed 's/[0-9]*$//;s/\([0-9]\)p$/\1/' <<<"${ROOTPART}")"
# Get the partition number too
PNUM="$(egrep -o "[0-9]+$" <<<"${ROOTPART}")"

# Ensure we get some kind of data from the above
if [[ -z "${ROOTPART}" || -z "${ROOTFS}" || -z "${ROOTDRIVE}" || -z "${PNUM}" ]]; then
	echo "Unable to determine root path components"
	return 1
fi

# first boot, need to resize root partition to fill disk
# then, since this is /, need to reboot to get kernel to see it
# after which its ext4 filesystem can be resized online

echo ""
echo "*******************************************************************"
echo "* Auto resizing root partition to fill block device - please wait *"
echo "*******************************************************************"
echo ""

touch "${SENTINEL}"
if ! [ -f "${SENTINEL}" ]; then
	# might mean an ro filesystem, and we don't want an
	# infinite loop
	echo "Failed to delete sentinel file '${SENTINEL}'"
	return 1
fi

# turn off swapfiles, for safety
swapoff -a

# sync filesystems before we begin, to minimize any damage if things go wrong
if ! sync &>/dev/null; then
	echo "Failed to sync to disk"
	return 1
fi

# begin by resizing the root partition
if ! sfdisk --no-reread --no-tell-kernel -N ${PNUM} <<<", +" "${ROOTDRIVE}" &>/dev/null; then
	echo "Failed to resize root partition"
	return 1
fi

# Tell the kernel about the change. Seperate for sake of logging
if ! partprobe "${ROOTPART}" &>/dev/null; then
	echo "Failed to read root partition change"
	return 1
fi

# Do an online resize of the root partition file system
if [ "${ROOTFS}" = "btrfs" ]; then
	if ! btrfs filesystem resize max "/" &>/dev/null; then
		echo "Failed to resize root filesystem"
		return 1
	fi
else
	if ! resize2fs -f "${ROOTPART}" &>/dev/null; then
		echo "Failed to resize root filesystem"
		return 1
	fi
fi

# Flush everything to disk
if ! sync &>/dev/null; then
	echo "Failed to sync to disk"
	return 1
fi

# Swap is OK to use again
swapon -a

echo ""
echo "*******************************************************************"
echo "*  Resize completed                                               *"
echo "*******************************************************************"
echo ""
